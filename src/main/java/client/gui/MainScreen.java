/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package client.gui;

import client.Client;
import commandsmanager.BaseCommand;
import commandsmanager.CommandFactory;
import commandsmanager.CommandUtils;
import java.awt.GridLayout;
import java.io.IOException;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import client.ClientManager;
import gamelogic.Fighter;
import gamelogic.Player;
import java.awt.Color;
import java.awt.Dimension;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.border.Border;

/**
 *
 * @author ivan
 */
public class MainScreen extends javax.swing.JFrame {
    
    private Player player;
    private JLabel[] fighterNameLabels = new JLabel[3];
    private JLabel[] fighterHpLabels = new JLabel[3];
    private JLabel[] fighterCellLabels = new JLabel[3];
    private JLabel[] fighterNameRLabels = new JLabel[3];
    private JLabel[] fighterTypeLabels = new JLabel[3];
    private JLabel[] fighterPowerLabels = new JLabel[3];
    private JLabel[] fighterResistanceLabels = new JLabel[3];
    private JLabel[] fighterSanityLabels = new JLabel[3];
    private JLabel[] fighterIconLabels = new JLabel[3];
    private JLabel[] fighterPercentageLabels = new JLabel[3];
    
    /**
     * Creates new form NewJFrame
     */
    public MainScreen() {
        initComponents();
        initClient();
        ClientManager.getCM().setMainScreen(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        pnlGameData = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txfTotalHP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txfDestroyedCells = new javax.swing.JTextField();
        lblTurn = new javax.swing.JLabel();
        lblFighter1 = new javax.swing.JLabel();
        lblFighterHp1 = new javax.swing.JLabel();
        lblFighterCells1 = new javax.swing.JLabel();
        lblFighter2 = new javax.swing.JLabel();
        lblFighterHp2 = new javax.swing.JLabel();
        lblFighterCells2 = new javax.swing.JLabel();
        lblFighterHp3 = new javax.swing.JLabel();
        lblFighterCells3 = new javax.swing.JLabel();
        lblFighter3 = new javax.swing.JLabel();
        pnlCommands = new javax.swing.JPanel();
        txfCommand = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaCommandsRegistry = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        pnlBoard = new javax.swing.JPanel();
        pnlLeft = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaAttackResults = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txaLogs = new javax.swing.JTextArea();
        pnlRight = new javax.swing.JPanel();
        lblFighterRight1 = new javax.swing.JLabel();
        lblFighterRight2 = new javax.swing.JLabel();
        lblFighterRight3 = new javax.swing.JLabel();
        pnlFighterInfoRight1 = new javax.swing.JPanel();
        lblFighterPercentageRight1 = new javax.swing.JLabel();
        lblFighterNameRight1 = new javax.swing.JLabel();
        lblFighterTypeRight1 = new javax.swing.JLabel();
        lblFighterPowerRight1 = new javax.swing.JLabel();
        lblFighterResistanceRight1 = new javax.swing.JLabel();
        lblFighterSanityRight1 = new javax.swing.JLabel();
        lblFighterPowerDataRight1 = new javax.swing.JLabel();
        lblFighterResistanceDataRight1 = new javax.swing.JLabel();
        lblFighterSanityDataRight1 = new javax.swing.JLabel();
        pnlFighterInfoRight2 = new javax.swing.JPanel();
        lblFighterPercentageRight2 = new javax.swing.JLabel();
        lblFighterNameRight2 = new javax.swing.JLabel();
        lblFighterTypeRight2 = new javax.swing.JLabel();
        lblFighterPowerRight2 = new javax.swing.JLabel();
        lblFighterResistanceRight2 = new javax.swing.JLabel();
        lblFighterSanityRight2 = new javax.swing.JLabel();
        lblFighterPowerDataRight2 = new javax.swing.JLabel();
        lblFighterResistanceDataRight2 = new javax.swing.JLabel();
        lblFighterSanityDataRight2 = new javax.swing.JLabel();
        pnlFighterInfoRight3 = new javax.swing.JPanel();
        lblFighterPercentageRight3 = new javax.swing.JLabel();
        lblFighterNameRight3 = new javax.swing.JLabel();
        lblFighterTypeRight3 = new javax.swing.JLabel();
        lblFighterPowerRight3 = new javax.swing.JLabel();
        lblFighterResistanceRight3 = new javax.swing.JLabel();
        lblFighterSanityRight3 = new javax.swing.JLabel();
        lblFighterPowerDataRight3 = new javax.swing.JLabel();
        lblFighterResistanceDataRight3 = new javax.swing.JLabel();
        lblFighterSanityDataRight3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 84, 119));
        setSize(new java.awt.Dimension(1280, 720));

        pnlMain.setBackground(new java.awt.Color(0, 84, 119));
        pnlMain.setFocusable(false);
        pnlMain.setPreferredSize(new java.awt.Dimension(1516, 720));

        pnlGameData.setBackground(new java.awt.Color(0, 84, 119));
        pnlGameData.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        pnlGameData.setFocusable(false);
        pnlGameData.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Vida:");
        jLabel1.setFocusable(false);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 21, -1, -1));

        txfTotalHP.setEditable(false);
        txfTotalHP.setBackground(new java.awt.Color(0, 84, 119));
        txfTotalHP.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txfTotalHP.setForeground(new java.awt.Color(255, 255, 255));
        txfTotalHP.setText("50.50%");
        txfTotalHP.setBorder(null);
        txfTotalHP.setFocusable(false);
        txfTotalHP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfTotalHPActionPerformed(evt);
            }
        });
        pnlGameData.add(txfTotalHP, new org.netbeans.lib.awtextra.AbsoluteConstraints(97, 21, -1, -1));

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setText("Casillas destruidas: ");
        jLabel2.setFocusable(false);
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(597, 21, -1, -1));

        txfDestroyedCells.setEditable(false);
        txfDestroyedCells.setBackground(new java.awt.Color(0, 84, 119));
        txfDestroyedCells.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txfDestroyedCells.setForeground(new java.awt.Color(255, 255, 255));
        txfDestroyedCells.setText("200");
        txfDestroyedCells.setBorder(null);
        txfDestroyedCells.setFocusable(false);
        pnlGameData.add(txfDestroyedCells, new org.netbeans.lib.awtextra.AbsoluteConstraints(775, 21, 42, -1));

        lblTurn.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        lblTurn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTurn.setText("No es su turno");
        lblTurn.setFocusable(false);
        lblTurn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(lblTurn, new org.netbeans.lib.awtextra.AbsoluteConstraints(361, 21, 130, -1));

        lblFighter1.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        lblFighter1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighter1.setText("Luchador 1");
        lblFighter1.setFocusable(false);
        lblFighter1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(lblFighter1, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 61, -1, -1));

        lblFighterHp1.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterHp1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterHp1.setText("100%");
        lblFighterHp1.setFocusable(false);
        lblFighterHp1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(lblFighterHp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 89, 97, -1));

        lblFighterCells1.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterCells1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterCells1.setText("300 de 300 casillas");
        lblFighterCells1.setFocusable(false);
        lblFighterCells1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(lblFighterCells1, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 112, 176, -1));

        lblFighter2.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        lblFighter2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighter2.setText("Luchador 2");
        lblFighter2.setFocusable(false);
        lblFighter2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(lblFighter2, new org.netbeans.lib.awtextra.AbsoluteConstraints(361, 56, 130, -1));

        lblFighterHp2.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterHp2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterHp2.setText("100%");
        lblFighterHp2.setFocusable(false);
        lblFighterHp2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(lblFighterHp2, new org.netbeans.lib.awtextra.AbsoluteConstraints(361, 84, 130, -1));

        lblFighterCells2.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterCells2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterCells2.setText("300 de 300 casillas");
        lblFighterCells2.setFocusable(false);
        lblFighterCells2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(lblFighterCells2, new org.netbeans.lib.awtextra.AbsoluteConstraints(361, 107, 130, -1));

        lblFighterHp3.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterHp3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterHp3.setText("100%");
        lblFighterHp3.setFocusable(false);
        lblFighterHp3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(lblFighterHp3, new org.netbeans.lib.awtextra.AbsoluteConstraints(729, 89, 97, -1));

        lblFighterCells3.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterCells3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterCells3.setText("300 de 300 casillas");
        lblFighterCells3.setFocusable(false);
        lblFighterCells3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(lblFighterCells3, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 112, 176, -1));

        lblFighter3.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        lblFighter3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighter3.setText("Luchador 3");
        lblFighter3.setFocusable(false);
        lblFighter3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlGameData.add(lblFighter3, new org.netbeans.lib.awtextra.AbsoluteConstraints(729, 61, -1, -1));

        pnlCommands.setBackground(new java.awt.Color(0, 84, 119));
        pnlCommands.setFocusable(false);

        txfCommand.setBackground(new java.awt.Color(0, 84, 119));
        txfCommand.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        txfCommand.setForeground(new java.awt.Color(255, 255, 255));
        txfCommand.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        txfCommand.setPreferredSize(new java.awt.Dimension(65, 35));
        txfCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfCommandActionPerformed(evt);
            }
        });

        jScrollPane1.setFocusable(false);

        txaCommandsRegistry.setEditable(false);
        txaCommandsRegistry.setBackground(new java.awt.Color(0, 84, 119));
        txaCommandsRegistry.setColumns(20);
        txaCommandsRegistry.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        txaCommandsRegistry.setForeground(new java.awt.Color(255, 255, 255));
        txaCommandsRegistry.setRows(5);
        txaCommandsRegistry.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        txaCommandsRegistry.setFocusable(false);
        jScrollPane1.setViewportView(txaCommandsRegistry);

        btnSend.setBackground(new java.awt.Color(0, 84, 119));
        btnSend.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        btnSend.setForeground(new java.awt.Color(255, 255, 255));
        btnSend.setText("Enviar");
        btnSend.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnSend.setFocusable(false);
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCommandsLayout = new javax.swing.GroupLayout(pnlCommands);
        pnlCommands.setLayout(pnlCommandsLayout);
        pnlCommandsLayout.setHorizontalGroup(
            pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCommandsLayout.createSequentialGroup()
                .addComponent(txfCommand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        pnlCommandsLayout.setVerticalGroup(
            pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCommandsLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txfCommand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pnlBoard.setBackground(new java.awt.Color(0, 84, 119));
        pnlBoard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        pnlBoard.setFocusable(false);
        pnlBoard.setPreferredSize(new java.awt.Dimension(524, 350));

        javax.swing.GroupLayout pnlBoardLayout = new javax.swing.GroupLayout(pnlBoard);
        pnlBoard.setLayout(pnlBoardLayout);
        pnlBoardLayout.setHorizontalGroup(
            pnlBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlBoardLayout.setVerticalGroup(
            pnlBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pnlLeft.setBackground(new java.awt.Color(0, 84, 119));
        pnlLeft.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        pnlLeft.setFocusable(false);
        pnlLeft.setPreferredSize(new java.awt.Dimension(405, 539));

        jScrollPane2.setFocusable(false);

        txaAttackResults.setEditable(false);
        txaAttackResults.setBackground(new java.awt.Color(0, 84, 119));
        txaAttackResults.setColumns(20);
        txaAttackResults.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        txaAttackResults.setForeground(new java.awt.Color(255, 255, 255));
        txaAttackResults.setRows(5);
        txaAttackResults.setText("Resultado del ataque:\n");
        txaAttackResults.setBorder(null);
        txaAttackResults.setFocusable(false);
        jScrollPane2.setViewportView(txaAttackResults);

        jScrollPane3.setFocusable(false);

        txaLogs.setEditable(false);
        txaLogs.setBackground(new java.awt.Color(0, 84, 119));
        txaLogs.setColumns(20);
        txaLogs.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        txaLogs.setForeground(new java.awt.Color(255, 255, 255));
        txaLogs.setRows(5);
        txaLogs.setText("Bitacora: \n");
        txaLogs.setBorder(null);
        txaLogs.setFocusable(false);
        jScrollPane3.setViewportView(txaLogs);

        javax.swing.GroupLayout pnlLeftLayout = new javax.swing.GroupLayout(pnlLeft);
        pnlLeft.setLayout(pnlLeftLayout);
        pnlLeftLayout.setHorizontalGroup(
            pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
            .addComponent(jScrollPane3)
        );
        pnlLeftLayout.setVerticalGroup(
            pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLeftLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlRight.setBackground(new java.awt.Color(0, 84, 119));
        pnlRight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        pnlRight.setFocusable(false);
        pnlRight.setPreferredSize(new java.awt.Dimension(315, 539));

        lblFighterRight1.setFocusable(false);

        lblFighterRight2.setFocusable(false);

        lblFighterRight3.setFocusable(false);

        pnlFighterInfoRight1.setBackground(new java.awt.Color(0, 84, 119));
        pnlFighterInfoRight1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblFighterPercentageRight1.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        lblFighterPercentageRight1.setForeground(new java.awt.Color(255, 255, 255));
        lblFighterPercentageRight1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterPercentageRight1.setText("100%");
        pnlFighterInfoRight1.add(lblFighterPercentageRight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 199, -1));

        lblFighterNameRight1.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        lblFighterNameRight1.setForeground(new java.awt.Color(255, 153, 153));
        lblFighterNameRight1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterNameRight1.setText("Nombre de luchador 1");
        pnlFighterInfoRight1.add(lblFighterNameRight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 34, 199, -1));

        lblFighterTypeRight1.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        lblFighterTypeRight1.setForeground(new java.awt.Color(255, 255, 204));
        lblFighterTypeRight1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterTypeRight1.setText("Tipo de Luchador 1");
        pnlFighterInfoRight1.add(lblFighterTypeRight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 59, 199, -1));

        lblFighterPowerRight1.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterPowerRight1.setText("Poder:");
        pnlFighterInfoRight1.add(lblFighterPowerRight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 101, 77, -1));

        lblFighterResistanceRight1.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterResistanceRight1.setText("Resistencia:");
        pnlFighterInfoRight1.add(lblFighterResistanceRight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 124, -1, -1));

        lblFighterSanityRight1.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterSanityRight1.setText("Sanidad:");
        pnlFighterInfoRight1.add(lblFighterSanityRight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 147, 77, -1));

        lblFighterPowerDataRight1.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterPowerDataRight1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblFighterPowerDataRight1.setText("100%");
        pnlFighterInfoRight1.add(lblFighterPowerDataRight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 101, -1, -1));

        lblFighterResistanceDataRight1.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterResistanceDataRight1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblFighterResistanceDataRight1.setText("100%");
        pnlFighterInfoRight1.add(lblFighterResistanceDataRight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 124, -1, -1));

        lblFighterSanityDataRight1.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterSanityDataRight1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblFighterSanityDataRight1.setText("100%");
        pnlFighterInfoRight1.add(lblFighterSanityDataRight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 147, -1, -1));

        pnlFighterInfoRight2.setBackground(new java.awt.Color(0, 84, 119));
        pnlFighterInfoRight2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblFighterPercentageRight2.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        lblFighterPercentageRight2.setForeground(new java.awt.Color(255, 255, 255));
        lblFighterPercentageRight2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterPercentageRight2.setText("100%");
        pnlFighterInfoRight2.add(lblFighterPercentageRight2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 199, -1));

        lblFighterNameRight2.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        lblFighterNameRight2.setForeground(new java.awt.Color(255, 153, 153));
        lblFighterNameRight2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterNameRight2.setText("Nombre de luchador 1");
        pnlFighterInfoRight2.add(lblFighterNameRight2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 34, 199, -1));

        lblFighterTypeRight2.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        lblFighterTypeRight2.setForeground(new java.awt.Color(255, 255, 204));
        lblFighterTypeRight2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterTypeRight2.setText("Tipo de Luchador 1");
        pnlFighterInfoRight2.add(lblFighterTypeRight2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 59, 199, -1));

        lblFighterPowerRight2.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterPowerRight2.setText("Poder:");
        pnlFighterInfoRight2.add(lblFighterPowerRight2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 101, 77, -1));

        lblFighterResistanceRight2.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterResistanceRight2.setText("Resistencia:");
        pnlFighterInfoRight2.add(lblFighterResistanceRight2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 124, -1, -1));

        lblFighterSanityRight2.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterSanityRight2.setText("Sanidad:");
        pnlFighterInfoRight2.add(lblFighterSanityRight2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 147, 77, -1));

        lblFighterPowerDataRight2.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterPowerDataRight2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblFighterPowerDataRight2.setText("100%");
        pnlFighterInfoRight2.add(lblFighterPowerDataRight2, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 101, -1, -1));

        lblFighterResistanceDataRight2.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterResistanceDataRight2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblFighterResistanceDataRight2.setText("100%");
        pnlFighterInfoRight2.add(lblFighterResistanceDataRight2, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 124, -1, -1));

        lblFighterSanityDataRight2.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterSanityDataRight2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblFighterSanityDataRight2.setText("100%");
        pnlFighterInfoRight2.add(lblFighterSanityDataRight2, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 147, -1, -1));

        pnlFighterInfoRight3.setBackground(new java.awt.Color(0, 84, 119));
        pnlFighterInfoRight3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblFighterPercentageRight3.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        lblFighterPercentageRight3.setForeground(new java.awt.Color(255, 255, 255));
        lblFighterPercentageRight3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterPercentageRight3.setText("100%");
        pnlFighterInfoRight3.add(lblFighterPercentageRight3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 199, -1));

        lblFighterNameRight3.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        lblFighterNameRight3.setForeground(new java.awt.Color(255, 153, 153));
        lblFighterNameRight3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterNameRight3.setText("Nombre de luchador 1");
        pnlFighterInfoRight3.add(lblFighterNameRight3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 34, 199, -1));

        lblFighterTypeRight3.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        lblFighterTypeRight3.setForeground(new java.awt.Color(255, 255, 204));
        lblFighterTypeRight3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFighterTypeRight3.setText("Tipo de Luchador 1");
        pnlFighterInfoRight3.add(lblFighterTypeRight3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 59, 199, -1));

        lblFighterPowerRight3.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterPowerRight3.setText("Poder:");
        pnlFighterInfoRight3.add(lblFighterPowerRight3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 101, 77, -1));

        lblFighterResistanceRight3.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterResistanceRight3.setText("Resistencia:");
        pnlFighterInfoRight3.add(lblFighterResistanceRight3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 124, -1, -1));

        lblFighterSanityRight3.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterSanityRight3.setText("Sanidad:");
        pnlFighterInfoRight3.add(lblFighterSanityRight3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 147, 77, -1));

        lblFighterPowerDataRight3.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterPowerDataRight3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblFighterPowerDataRight3.setText("100%");
        pnlFighterInfoRight3.add(lblFighterPowerDataRight3, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 101, -1, -1));

        lblFighterResistanceDataRight3.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterResistanceDataRight3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblFighterResistanceDataRight3.setText("100%");
        pnlFighterInfoRight3.add(lblFighterResistanceDataRight3, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 124, -1, -1));

        lblFighterSanityDataRight3.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        lblFighterSanityDataRight3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblFighterSanityDataRight3.setText("100%");
        pnlFighterInfoRight3.add(lblFighterSanityDataRight3, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 147, -1, -1));

        javax.swing.GroupLayout pnlRightLayout = new javax.swing.GroupLayout(pnlRight);
        pnlRight.setLayout(pnlRightLayout);
        pnlRightLayout.setHorizontalGroup(
            pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlRightLayout.createSequentialGroup()
                        .addComponent(lblFighterRight1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlFighterInfoRight1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlRightLayout.createSequentialGroup()
                        .addComponent(lblFighterRight2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlFighterInfoRight2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlRightLayout.createSequentialGroup()
                        .addComponent(lblFighterRight3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlFighterInfoRight3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        pnlRightLayout.setVerticalGroup(
            pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlFighterInfoRight1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblFighterRight1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblFighterRight2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlFighterInfoRight2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblFighterRight3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlFighterInfoRight3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlCommands, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(pnlLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlGameData, javax.swing.GroupLayout.DEFAULT_SIZE, 918, Short.MAX_VALUE)
                            .addComponent(pnlBoard, javax.swing.GroupLayout.DEFAULT_SIZE, 918, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlRight, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(pnlMainLayout.createSequentialGroup()
                            .addComponent(pnlBoard, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pnlGameData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(pnlLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlRight, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(pnlCommands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlGameData.getAccessibleContext().setAccessibleParent(pnlMain);
        pnlCommands.getAccessibleContext().setAccessibleParent(pnlMain);
        pnlBoard.getAccessibleContext().setAccessibleParent(pnlMain);
        pnlLeft.getAccessibleContext().setAccessibleParent(pnlMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 1700, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void txfCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfCommandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfCommandActionPerformed

    private void txfTotalHPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfTotalHPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfTotalHPActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        String command = txfCommand.getText().trim();
        System.out.println("comando enviado: " + command);
        if (!command.equals("")) {
            String array[] = CommandUtils.convertToArray(command);
            BaseCommand newCommand = CommandFactory.getCommand(array[0], array, player);
            if (newCommand.getCommandName().toUpperCase().equals("ERROR")) {
                showClientMessage(newCommand.executeOnClient());
            } else  if (
                    newCommand.getCommandName().toUpperCase().equals("CHAT") ||
                    newCommand.getCommandName().toUpperCase().equals("CHAT PRIVADO") ||
                    newCommand.getCommandName().toUpperCase().equals("CREAR PERSONAJE") ||
                    newCommand.getCommandName().toUpperCase().equals("INICIAR PARTIDA") ||
                    player.isTurn()
                    ){
                try {
                    showCommandRegistry(newCommand.getArgsStr());
                    ClientManager.getCM().getThreadClient().getWriter().writeObject(newCommand);
                } catch (IOException ex) {
                }
            } else
                showCommandRegistry("No es su turno");
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void initBoard() {
        pnlBoard.setLayout(new GridLayout(21, 31, 0, 0));
        Border whileLine = BorderFactory.createLineBorder(Color.white);
        int x = 1;
        JLabel blank = new JLabel();
        pnlBoard.add(blank);
        for (int i = 1; i < 31; i++) {
            JLabel label = new JLabel(Integer.toString(i));
            label.setForeground(Color.white);
            label.setHorizontalAlignment(JLabel.CENTER);
            pnlBoard.add(label);            
        }
        for (int row = 0; row < 20; row++) {
            JLabel label = new JLabel(Integer.toString(x));
            label.setForeground(Color.white);
            label.setHorizontalAlignment(JLabel.CENTER);
            pnlBoard.add(label);
            x++;
            for (int col = 0; col < 30; col++) {
                int[] placement = {row+1, col+1};
                Cell cell = new Cell("E", placement);
                cell.setHorizontalAlignment(SwingConstants.CENTER);
                cell.setText("");
                cell.setOpaque(true);
                cell.setBackground(Color.gray);
                cell.setForeground(Color.black);
                cell.setFocusable(false);
                cell.setBorder(whileLine);
                player.getCells()[row][col] = cell;
                pnlBoard.add(player.getCells()[row][col]);
            }
        }
    }
    
    public void showPopup(String str) {
        JOptionPane.showMessageDialog(null, str);
    }
    
    public void showScrollablePopup(String str) {
        JTextArea textArea = new JTextArea(str);
        JScrollPane scrollPane = new JScrollPane(textArea);  
        textArea.setLineWrap(true);  
        textArea.setWrapStyleWord(true); 
        scrollPane.setPreferredSize( new Dimension( 500, 500 ) );
        JOptionPane.showMessageDialog(null, scrollPane, "Registro",  
                                               JOptionPane.INFORMATION_MESSAGE);
    }
    
    public void updateInfoPanels() {
        txfTotalHP.setText(new DecimalFormat("#.##").format(player.getHp()) + "%");
        txfDestroyedCells.setText(Integer.toString(600 - player.getCellsLeft()));
        updateFighterPanels();
        if (player.isTurn())
            lblTurn.setText("Es su turno!");
        else
            lblTurn.setText("No es su turno");
        for (int i = 0; i < 3; i++) {
            String fighterName = fighterNameLabels[i].getText();
            try {
                int[] data = player.getFighterCells(fighterName); //fighter has [0] out of [1] cells
                double hpPercent = 100f * ((double)data[0]/(double)data[1]);
                String cellsTxt = data[0] + " de " + data[1] + " casillas";
                fighterHpLabels[i].setText(new DecimalFormat("#.##").format(hpPercent) + "%");
                fighterCellLabels[i].setText(cellsTxt);
            } catch (Exception ex) {
                ex.printStackTrace();
                break;
            }
        }
    }
    
    private void updateFighterPanels() {
        for (int i = 0; i < player.getFighters().size(); i++)
            if (!fighterNameLabels[i].getText().equals(player.getFighters().get(i).getName())) {
                Fighter fighter = player.getFighters().get(i);
                String name = fighter.getName();
                String percentage = Integer.toString(fighter.getPercentage());
                String iconStr = "/fighter_icons/" + fighter.getImage() + ".png";
                ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource(iconStr));
                String power = Integer.toString(fighter.getPower());
                String resistance = Integer.toString(fighter.getResistance());
                String sanity = Integer.toString(fighter.getSanity());
                fighterNameLabels[i].setText(name);
                fighterNameRLabels[i].setText(name);
                fighterPercentageLabels[i].setText(percentage);
                fighterIconLabels[i].setIcon(icon);
                fighterPowerLabels[i].setText(power);
                fighterResistanceLabels[i].setText(resistance);
                fighterSanityLabels[i].setText(sanity);
            }
    }
    
    public void showLastAttack(String str) {
        String strToUse = "Resultado del ataque:\n" + str;
        txaAttackResults.setText(strToUse);
    }
    
    private void initClient() {
        ClientManager.getCM().setMainScreen(this);
        String name = JOptionPane.showInputDialog("Escriba su nombre por favor");
        ClientManager.getCM().setClient();
        ClientManager.getCM().setPlayerName(name);
        player = new Player(name);
        initBoard();
        initArrays();
        updateInfoPanels();
        ClientManager.getCM().getClient().connect(player);
    }
    
    private void initArrays() {
        fighterHpLabels[0] = lblFighterHp1;
        fighterHpLabels[1] = lblFighterHp2;
        fighterHpLabels[2] = lblFighterHp3;
        
        fighterCellLabels[0] = lblFighterCells1;
        fighterCellLabels[1] = lblFighterCells2;
        fighterCellLabels[2] = lblFighterCells3;
        
        fighterNameLabels[0] = lblFighter1;
        fighterNameLabels[1] = lblFighter2;
        fighterNameLabels[2] = lblFighter3;
        
        fighterNameRLabels[0] = lblFighterNameRight1;
        fighterNameRLabels[1] = lblFighterNameRight2;
        fighterNameRLabels[2] = lblFighterNameRight3;
        
        fighterTypeLabels[0] = lblFighterTypeRight1;
        fighterTypeLabels[1] = lblFighterTypeRight2;
        fighterTypeLabels[2] = lblFighterTypeRight3;
        
        fighterPowerLabels[0] = lblFighterPowerDataRight1;
        fighterPowerLabels[1] = lblFighterPowerDataRight2;
        fighterPowerLabels[2] = lblFighterPowerDataRight3;
        
        fighterResistanceLabels[0] = lblFighterResistanceDataRight1;
        fighterResistanceLabels[1] = lblFighterResistanceDataRight2;
        fighterResistanceLabels[2] = lblFighterResistanceDataRight3;
        
        fighterSanityLabels[0] = lblFighterSanityDataRight1;
        fighterSanityLabels[1] = lblFighterSanityDataRight2;
        fighterSanityLabels[2] = lblFighterSanityDataRight3;
        
        fighterIconLabels[0] = lblFighterRight1;
        fighterIconLabels[1] = lblFighterRight2;
        fighterIconLabels[2] = lblFighterRight3;
        
        fighterPercentageLabels[0] = lblFighterPercentageRight1;
        fighterPercentageLabels[1] = lblFighterPercentageRight2;
        fighterPercentageLabels[2] = lblFighterPercentageRight3;
        
        for (int i = 0; i < 3; i++) {
            fighterHpLabels[i].setForeground(Color.white);
            fighterCellLabels[i].setForeground(Color.white);
            fighterNameLabels[i].setForeground(Color.white);
        }
    }
    
    public void showCommandRegistry(String msg) {
        String text = txaCommandsRegistry.getText();
        text += "\n" + msg;
        txaCommandsRegistry.setText(text);
    }

    public void showClientMessage(String msg) {
        this.txaLogs.append(msg + "\n");
    }
    
    public void printCells(Cell[][] cells) {
//        Cell[][] cells = player.getCells();
        for (Cell[] row : cells)
            System.out.println(Arrays.toString(row));
    }
    
//    public void addFighter(Fighter fighter) {
//        
//        int x = 0;
//        Cell[][] cellsAux = new Cell[20][30];
//        for (int row = 0; row < this.player.getCells().length; row++)
//            for (int n = 0; n < this.player.getCells()[row].length; n++) {
//                int[] coords = new int[2];
//                Cell initialCell = this.player.getCells()[row][n];
//                System.arraycopy(initialCell.getPlacement(), 0, coords, 0, 2);
//                Cell newCell = new Cell("", coords);
//                newCell.setBackground(initialCell.getBackground());
//                cellsAux[row][n] = newCell;
//            }
//        shuffleMatrix(cellsAux);
//        outerloop:
//        for (Cell[] cell1 : cellsAux) {
//            for (Cell cell : cell1) {
//                if (x == numOfCellsToPaint)
//                    break outerloop;
//                else if (cell.getBackground() == Color.gray) {
//                    cell.setFighter(fighter);
//                    x++;
//                }
//            }
//        }
//        updateCells(cellsAux);
//    }
    
//    private void shuffleMatrix(Cell[][] arr) {
//        Random random = new Random();
//
//        for (int i = arr.length - 1; i > 0; i--) {
//            for (int j = arr[i].length - 1; j > 0; j--) {
//                int m = random.nextInt(i + 1);
//                int n = random.nextInt(j + 1);
//
//                Cell temp = arr[i][j];
//                arr[i][j] = arr[m][n];
//                arr[m][n] = temp;
//            }
//        }
//    }

    public Player getPlayer() {
        return player;
    }

    public void setPlayer(Player player) {
        this.player = player;
    }
    
//    public void updateCells(Cell[][] newCells) {
//        int x = 0;
//        int y = 0;
//        try {
//            for (int row = 0; row < this.player.getCells().length; row++) {
//                for (int cell = 0; cell < this.player.getCells()[row].length; cell++) {
//                    Cell newCell = newCells[row][cell];
//                    int[] placements = newCell.getPlacement();
//                    x = placements[0] - 1;
//                    y = placements[1] - 1;
//                    this.player.getCells()[x][y].updateCell(newCell);
//                }
//            }
//        } catch (java.lang.ArrayIndexOutOfBoundsException ex) {
//            ex.printStackTrace();
//        }
//    }
    
    public String askForThreeNumbers() {
        return JOptionPane.showInputDialog("Un jugador lo esta atacando, digite 3 numeros separados por \"-\"");
    }
    
    public static void start() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblFighter1;
    private javax.swing.JLabel lblFighter2;
    private javax.swing.JLabel lblFighter3;
    private javax.swing.JLabel lblFighterCells1;
    private javax.swing.JLabel lblFighterCells2;
    private javax.swing.JLabel lblFighterCells3;
    private javax.swing.JLabel lblFighterHp1;
    private javax.swing.JLabel lblFighterHp2;
    private javax.swing.JLabel lblFighterHp3;
    private javax.swing.JLabel lblFighterNameRight1;
    private javax.swing.JLabel lblFighterNameRight2;
    private javax.swing.JLabel lblFighterNameRight3;
    private javax.swing.JLabel lblFighterPercentageRight1;
    private javax.swing.JLabel lblFighterPercentageRight2;
    private javax.swing.JLabel lblFighterPercentageRight3;
    private javax.swing.JLabel lblFighterPowerDataRight1;
    private javax.swing.JLabel lblFighterPowerDataRight2;
    private javax.swing.JLabel lblFighterPowerDataRight3;
    private javax.swing.JLabel lblFighterPowerRight1;
    private javax.swing.JLabel lblFighterPowerRight2;
    private javax.swing.JLabel lblFighterPowerRight3;
    private javax.swing.JLabel lblFighterResistanceDataRight1;
    private javax.swing.JLabel lblFighterResistanceDataRight2;
    private javax.swing.JLabel lblFighterResistanceDataRight3;
    private javax.swing.JLabel lblFighterResistanceRight1;
    private javax.swing.JLabel lblFighterResistanceRight2;
    private javax.swing.JLabel lblFighterResistanceRight3;
    private javax.swing.JLabel lblFighterRight1;
    private javax.swing.JLabel lblFighterRight2;
    private javax.swing.JLabel lblFighterRight3;
    private javax.swing.JLabel lblFighterSanityDataRight1;
    private javax.swing.JLabel lblFighterSanityDataRight2;
    private javax.swing.JLabel lblFighterSanityDataRight3;
    private javax.swing.JLabel lblFighterSanityRight1;
    private javax.swing.JLabel lblFighterSanityRight2;
    private javax.swing.JLabel lblFighterSanityRight3;
    private javax.swing.JLabel lblFighterTypeRight1;
    private javax.swing.JLabel lblFighterTypeRight2;
    private javax.swing.JLabel lblFighterTypeRight3;
    private javax.swing.JLabel lblTurn;
    private javax.swing.JPanel pnlBoard;
    private javax.swing.JPanel pnlCommands;
    private javax.swing.JPanel pnlFighterInfoRight1;
    private javax.swing.JPanel pnlFighterInfoRight2;
    private javax.swing.JPanel pnlFighterInfoRight3;
    private javax.swing.JPanel pnlGameData;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlRight;
    private javax.swing.JTextArea txaAttackResults;
    private javax.swing.JTextArea txaCommandsRegistry;
    private javax.swing.JTextArea txaLogs;
    private javax.swing.JTextField txfCommand;
    private javax.swing.JTextField txfDestroyedCells;
    private javax.swing.JTextField txfTotalHP;
    // End of variables declaration//GEN-END:variables
}
